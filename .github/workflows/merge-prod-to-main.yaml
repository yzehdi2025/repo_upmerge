# Merge changes in prod branch to the main branch
name: upmerge prod to main

on:
  workflow_dispatch:
  # this is UTC
  schedule:
    - cron: '0 8 * * *'
    - cron: '0 12 * * *'
    - cron: '0 16 * * *'

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'

jobs:
  prod-upmerge:
    runs-on: ubuntu-latest
    steps:
      - name: Source branch
        run: echo "source_branch=prod" >> $GITHUB_ENV
      - name: Check out the source branch
        uses: actions/checkout@v4
        with:
          ref: ${{ env.source_branch }}
          fetch-depth: 0
      - name: Set up git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "noreply@github.com"
          git config --global push.autoSetupRemote true
      - name: Get the target branch and check conditions
        run: |
          git fetch origin
          
          target_branch="main"
          
          echo "target_branch=${target_branch}" >> $GITHUB_ENV
          
          if ! git diff --merge-base --quiet origin/${target_branch}; then
            echo "to_be_merged=true" >> $GITHUB_ENV
          fi
      - name: Get commit date of the source branch
        run: echo "source_date=$(git log -1 --format=%cd --date=format:%Y-%m-%d_%H-%M-%S)" >> $GITHUB_ENV
      - name: Get SHA of the source branch
        run: echo "source_sha=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Create merge branch
        if: ${{ env.to_be_merged == 'true' }}
        run: |
          merge_branch=resolve_${{ env.source_branch }}_to_${{ env.target_branch }}_at_${{ env.source_date }}_from_${{ env.source_sha }}
          if git ls-remote --quiet --exit-code --heads origin ${merge_branch}; then
            echo "to_be_merged=false" >> $GITHUB_ENV    # the resolve branch already exists. no need to try to create again, but just update the branch if possible
            git checkout ${merge_branch}
            if ! gh pr update-branch; then
              echo "The resolve branch cannot be updated"
            fi
          else
            git checkout -b ${merge_branch}
          fi
          echo "merge_branch=${merge_branch}" >> $GITHUB_ENV
      - name: Merge the target branch into the merge branch
        if: ${{ env.to_be_merged == 'true' }}
        run: |
          git merge origin/${target_branch} --no-commit --no-ff || true
          if git ls-files -u | grep -q .; then
            echo "Merge conflicts detected! Aborting merge."
            git merge --abort
          else
            git commit -m "Merge ${{ env.target_branch }} into ${{ env.merge_branch }}" || true
          fi
          git push
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Create PR
        if: ${{ env.to_be_merged == 'true' }}
        run: |
          pr_url=$(gh pr create --title "Resolve ${{ env.source_branch }} to ${{ env.target_branch }} at ${{ env.source_date }} from ${{ env.source_sha }}" \
          --body "Up-merge" \
          --head "${{ env.merge_branch }}" \
          --base "${{ env.target_branch }}")
          echo "pr_url=${pr_url}" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true  #if there are conflicts at pr creation, the result will be an error even if the pr is created successfully. I don't want these cases to fail the whole workflow
      - name: Auto approve
        if: ${{ env.to_be_merged == 'true' && env.pr_url != '' }}
        run: |
          gh pr review --approve "${{ env.pr_url }}"
        env:
          GITHUB_TOKEN: ${{secrets.BOT_TOKEN}}
        continue-on-error: true
      - name: Auto merge
        if: ${{ env.to_be_merged == 'true' && env.pr_url != '' }}
        run: |
          gh pr merge --auto --merge "${{ env.pr_url }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true